api {
  service {
    host = localhost
    port = 8080
    # In milliseconds
    request.timeout = 60000
  }
}

kafka {
  topic = telemetry
}

rest-dispatcher {
  executor = "fork-join-executor"
  fork-join-executor {
    # The parallelism factor is used to determine thread pool size using the
    # following formula: ceil(available processors * factor). Resulting size
    # is then bounded by the parallelism-min and parallelism-max values.
    parallelism-factor = 3.0

    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 4

    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 32
  }
  # Throughput for default Dispatcher, set to 1 for as fair as possible
  throughput = 1
}

kafka-message-dispatcher {
  executor = "fork-join-executor"
  fork-join-executor {
    # The parallelism factor is used to determine thread pool size using the
    # following formula: ceil(available processors * factor). Resulting size
    # is then bounded by the parallelism-min and parallelism-max values.
    parallelism-factor = 3.0

    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 4

    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 32
  }
  # Throughput for default Dispatcher, set to 1 for as fair as possible
  throughput = 1
}

akka.kafka.default-dispatcher {
  type = "Dispatcher"
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    # fixed-pool-size = 32
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 8
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 3.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 32
  }
}

akka.kafka.producer {
  # Tuning parameter of how many sends that can run in parallel.
  parallelism = 16

  # How long to wait for `org.sunbird.telemetry.sink.KafkaProducer.close`
  close-timeout = 60s

  # Fully qualified config path which holds the dispatcher configuration
  # to be used by the producer stages. Some blocking may occur.
  # When this value is empty, the dispatcher configured for the stream
  # will be used.
  use-dispatcher = "akka.kafka.default-dispatcher"

  # The time interval to commit a transaction when using the `Transactional.sink` or `Transactional.flow`
  # eos-commit-interval = 100ms

  # Properties defined by org.apache.kafka.clients.producer.ProducerConfig
  # can be defined in this configuration section.

  kafka-clients {
    bootstrap.servers = "localhost:9092"
    enable.auto.commit = true
    acks = "all"
    retries = 0
    batch.size = 32768
  }

}

akka {
  loglevel = "ERROR"
  actor {
    deployment {
      /kafkaProducerActor {
        router = smallest-mailbox-pool
        nr-of-instances = 20
      }
    }
  }
}